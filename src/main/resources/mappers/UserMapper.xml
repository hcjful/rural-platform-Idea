<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.rural.platform.mapper.UserMapper">

	<resultMap type="com.rural.platform.entity.User" id="userResult">
		<id column="user_id" property="userId" />
		<result column="user_name" property="userName" />
		<result column="user_code" property="userCode" />
		<result column="user_pwd" property="userPwd" />
		<result column="user_type" property="userType" />
		<result column="user_state" property="userState" />
		<result column="is_delete" property="isDelete" />
		<result column="create_by" property="createBy" />
		<result column="create_time" property="createTime" />
		<result column="update_by" property="updateBy" />
		<result column="update_time" property="updateTime" />
		<result column="get_Code" property="creatorCode"/>
	</resultMap>

	<!--public User findUserByCode(String userCode)-->
	<select id="findUserByCode" resultMap="userResult">
		SELECT * FROM user_info
		WHERE user_code = #{userCode}
	</select>

	<!--
	  //查询用户总行数的方法
	  public int selectUserCount(User user)
	-->
	<select id="selectUserCount" resultType="integer">
		select count(*) from user_info
		<where>
			<if test="userCode != null and userCode != ''">
				and user_code like concat('%', #{userCode}, '%')
			</if>
			<if test="userType != null and userType != ''">
				and user_type = #{userType}
			</if>
			<if test="userState != null and userState != ''">
				and user_state = #{userState}
			</if>
			and is_delete = 0
		</where>
	</select>

    <!--
     //分页查询用户的方法
	 public List<User> selectUserPage(@Param("page") Page page, @Param("user")User user)
    -->
	<select id="selectUserPage" resultMap="userResult">
		select t1.*, t2.user_code getCode from user_info t1, user_info t2
		<where>
			and t1.create_by = t2.user_id
			<if test="user.userCode != null and user.userCode != ''">
				and t1.user_code like concat('%', #{user.userCode}, '%')
			</if>
			<if test="user.userType != null and user.userType != ''">
				and t1.user_type = #{user.userType}
			</if>
			<if test="user.userState != null and user.userState != ''">
				and t1.user_state = #{user.userState}
			</if>
			and t1.is_delete = 0
		</where>
		limit #{page.limitIndex}, #{page.pageSize}
	</select>
	<select id="selectAll" resultType="com.rural.platform.entity.User">
		select * from user_info
	</select>
	<select id="selectUserByCode" resultType="com.rural.platform.entity.User">
		select * from user_info where user_code = #{userCode}
	</select>
    <insert id="insert" parameterType="com.rural.platform.entity.User" useGeneratedKeys="true" keyProperty="userId">
        INSERT INTO user_info (
            user_code, user_name, user_pwd, user_type, user_state, 
            is_delete, email, phone, create_time
        ) VALUES (
            #{userCode}, #{userName}, #{userPwd}, #{userType}, #{userState},
            #{isDelete}, #{email}, #{phone}, #{createTime}
        )
    </insert>
    
    <select id="countByUserCode" resultType="int">
        SELECT COUNT(*) FROM user_info WHERE user_code = #{userCode} AND is_delete = '0'
    </select>
    
    <select id="countByEmail" resultType="int">
        SELECT COUNT(*) FROM user_info WHERE email = #{email} AND is_delete = '0'
    </select>
    
    <select id="countByPhone" resultType="int">
        SELECT COUNT(*) FROM user_info WHERE phone = #{phone} AND is_delete = '0'
    </select>
	<!--
	  //添加用户的方法
	  public int insertUser(User user);
	-->
<!--	<insert id="insertUser">-->
<!--		insert into user_info-->
<!--		(user_name,user_code,user_pwd,user_state,is_delete,create_by,create_time)-->
<!--		values-->
<!--		(#{userName},#{userCode},#{userPwd},0,0,#{createBy},now())-->
<!--	</insert>-->

<!--	&lt;!&ndash;-->
<!--	  //根据用户id修改用户状态的方法-->
<!--	  public int updateUserState(User user)-->
<!--	&ndash;&gt;-->
<!--	<update id="updateUserState">-->
<!--		update user_info set-->
<!--		user_state = #{userState}, update_By=#{updateBy}, update_time=#{updateTime}-->
<!--		where user_id = #{userId}-->
<!--	</update>-->

<!--	&lt;!&ndash;-->
<!--	  //根据用户id将用户状态修改为删除状态-->
<!--	  public int setUserDelete(Integer userId)-->
<!--	&ndash;&gt;-->
<!--	<update id="setUserDelete">-->
<!--		update user_info set is_delete = 1 where user_id = #{userId}-->
<!--	</update>-->

<!--	&lt;!&ndash;-->
<!--	 //根据用户id修改用户昵称的方法-->
<!--	 public int updateNameById(User user)-->
<!--	&ndash;&gt;-->
<!--	<update id="updateNameById">-->
<!--		update user_info set-->
<!--		user_name = #{userName}, update_by = #{updateBy}, update_time = now()-->
<!--		where user_id = #{userId}-->
<!--	</update>-->

	<!--
	 //根据用户id修改密码的方法
	 public int updatePwdById(User user)
	-->
	<update id="updatePwdById">
		update user_info set user_pwd = #{userPwd} where user_id = #{userId}
	</update>

	<resultMap id="userMap" type="com.rural.platform.entity.User">
		<id property="id" column="id"/>
		<result property="username" column="username"/>
		<result property="password" column="password"/>
		<result property="phone" column="phone"/>
		<result property="address" column="address"/>
		<result property="createdAt" column="created_at"/>
		<collection property="roles" ofType="com.rural.platform.entity.Role">
			<id property="id" column="role_id"/>
			<result property="name" column="role_name"/>
			<result property="code" column="role_code"/>
			<result property="description" column="role_description"/>
		</collection>
	</resultMap>
	
	<sql id="Base_Column_List">
		id, username, password, phone, address, created_at
	</sql>
	
	<select id="findById" resultMap="userMap">
		SELECT u.*, r.id as role_id, r.name as role_name, r.code as role_code, r.description as role_description
		FROM user u
		LEFT JOIN user_role ur ON u.id = ur.user_id
		LEFT JOIN role r ON ur.role_id = r.id
		WHERE u.id = #{id}
	</select>
	
	<select id="findByUsername" resultMap="userMap">
		SELECT u.*, r.id as role_id, r.name as role_name, r.code as role_code, r.description as role_description
		FROM user u
		LEFT JOIN user_role ur ON u.id = ur.user_id
		LEFT JOIN role r ON ur.role_id = r.id
		WHERE u.username = #{username}
	</select>
	
	<select id="findAll" resultMap="userMap">
		SELECT u.*, r.id as role_id, r.name as role_name, r.code as role_code, r.description as role_description
		FROM user u
		LEFT JOIN user_role ur ON u.id = ur.user_id
		LEFT JOIN role r ON ur.role_id = r.id
		ORDER BY u.id
	</select>
	
	<select id="findByRole" resultMap="userMap">
		SELECT u.*, r.id as role_id, r.name as role_name, r.code as role_code, r.description as role_description
		FROM user u
		INNER JOIN user_role ur ON u.id = ur.user_id
		INNER JOIN role r ON ur.role_id = r.id
		WHERE r.code = #{roleCode}
	</select>
	
	<insert id="insert" parameterType="com.rural.platform.entity.User" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO user (username, password, phone, address)
		VALUES (#{username}, #{password}, #{phone}, #{address})
	</insert>
	
	<update id="update" parameterType="com.rural.platform.entity.User">
		UPDATE user
		<set>
			<if test="password != null">password = #{password},</if>
			<if test="phone != null">phone = #{phone},</if>
			<if test="address != null">address = #{address},</if>
		</set>
		WHERE id = #{id}
	</update>
	
	<delete id="delete">
		DELETE FROM user WHERE id = #{id}
	</delete>
	
	<select id="countByUsername" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM user WHERE username = #{username}
	</select>
	
	<select id="search" resultMap="userMap">
		SELECT u.*, r.id as role_id, r.name as role_name, r.code as role_code, r.description as role_description
		FROM user u
		LEFT JOIN user_role ur ON u.id = ur.user_id
		LEFT JOIN role r ON ur.role_id = r.id
		<where>
			<if test="username != null and username != ''">
				AND u.username LIKE CONCAT('%', #{username}, '%')
			</if>
			<if test="phone != null and phone != ''">
				AND u.phone LIKE CONCAT('%', #{phone}, '%')
			</if>
			<if test="roleCode != null and roleCode != ''">
				AND r.code = #{roleCode}
			</if>
		</where>
		ORDER BY u.id
	</select>
</mapper>
