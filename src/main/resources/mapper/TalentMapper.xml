<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rural.platform.mapper.TalentMapper">
    
    <resultMap id="TalentResult" type="com.rural.platform.entity.Talent">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="category" column="category"/>
        <result property="content" column="content"/>
        <result property="imageUrl" column="image_url"/>
        <result property="authorName" column="author_name"/>
        <result property="authorAvatar" column="author_avatar"/>
        <result property="likes" column="likes"/>
        <result property="isLiked" column="is_liked"/>
        <result property="publishDate" column="publish_date"/>
    </resultMap>

    <sql id="selectTalentVo">
        SELECT 
            id, title, category, content,
            image_url, author_name, author_avatar,
            likes, is_liked, publish_date
        FROM talents
    </sql>

    <sql id="whereClause">
        <where>
            <if test="category != null and category != ''">
                AND category = #{category}
            </if>
            <if test="search != null and search != ''">
                AND (
                    title LIKE CONCAT('%', #{search}, '%') OR
                    content LIKE CONCAT('%', #{search}, '%') OR
                    author_name LIKE CONCAT('%', #{search}, '%')
                )
            </if>
        </where>
    </sql>

    <select id="selectTalentList" resultMap="TalentResult">
        <include refid="selectTalentVo"/>
        ORDER BY publish_date DESC
    </select>

    <select id="selectTalentById" parameterType="Long" resultMap="TalentResult">
        <include refid="selectTalentVo"/>
        WHERE id = #{id}
    </select>

    <select id="countTalents" resultType="int">
        SELECT COUNT(*)
        FROM talents
        <include refid="whereClause"/>
    </select>

    <select id="findByPage" resultMap="TalentResult">
        <include refid="selectTalentVo"/>
        <include refid="whereClause"/>
        ORDER BY publish_date DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <update id="updateTalent" parameterType="com.rural.platform.entity.Talent">
        UPDATE talents
        <set>
            <if test="likes != null">likes = #{likes},</if>
            <if test="isLiked != null">is_liked = #{isLiked},</if>
        </set>
        WHERE id = #{id}
    </update>
</mapper> 